schema {
  query: RootQuery
  mutation: RootMutation
}

input addUserInput {
  name: String
  email: String
  password: String
  updatedAt: Date
  createdAt: Date
  clientMutationId: String
}

type addUserPayload {
  viewer: Viewer
  changedUserEdge: changedUserEdge
  clientMutationId: String
}

"""An edge in a connection."""
type changedUserEdge {
  """The item at the end of the edge"""
  node: changedUserNode

  """A cursor for use in pagination"""
  cursor: String!
}

type changedUserNode {
  name: String
  email: String
  password: String
  _id: ID
  updatedAt: Date
  createdAt: Date

  """The ID of an object"""
  id: ID!
}

scalar Date

input deleteUserInput {
  id: ID!
  clientMutationId: String
}

type deleteUserPayload {
  viewer: Viewer
  ok: Boolean
  id: ID!
  clientMutationId: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum orderByUser {
  NAME_ASC
  NAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  _ID_ASC
  _ID_DESC
  UPDATEDAT_ASC
  UPDATEDAT_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
}

type RootMutation {
  addUser(input: addUserInput!): addUserPayload
  updateUser(input: updateUserInput!): updateUserPayload
  deleteUser(input: deleteUserInput!): deleteUserPayload
}

type RootQuery {
  user(id: ID!): User
  User(
    """The ID of a User"""
    id: [ID]

    """The ID of a User"""
    ids: [ID]
    orderBy: orderByUser
    name: String
    email: String
    password: String
    _id: ID
    updatedAt: Date
    createdAt: Date
  ): [User]
  viewer: Viewer

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

input updateUserInput {
  name: String
  email: String
  password: String
  updatedAt: Date
  createdAt: Date
  id: ID!
  clientMutationId: String
}

type updateUserPayload {
  changedUser: User
  clientMutationId: String
}

type User implements Node {
  name: String
  email: String
  password: String
  _id: ID
  updatedAt: Date
  createdAt: Date

  """The ID of an object"""
  id: ID!
}

type Viewer implements Node {
  """The ID of an object"""
  id: ID!
  user(id: ID!): User
}
